export default {
    "ActionsMenu.mjs": "import localforage from \"https://cdn.skypack.dev/localforage\";\nimport { css } from 'https://cdn.skypack.dev/@emotion/css';\nconst {\n    useMenuState,\n    Menu,\n    MenuItem,\n    MenuButton\n} = Reakit;\n\n\nasync function makeImage() {\n    // An image is just a snapshot of the IndexedDB filesystem,\n    // formatted as an ES module.\n    const files = Object.fromEntries(\n        await Promise.all(\n            (await localforage.keys())\n            // _originalImage.js is dynamically added at the time of bootstrapping\n            .filter(key => key !== \"_originalImage.js\")\n            .map(async file => [file, await localforage.getItem(file)])\n        )\n    );\n    \n    return `export default ${JSON.stringify(files, null, 4)};`;\n}\n\nasync function exportImage() {\n    window.open(URL.createObjectURL(new Blob([await makeImage()], { type: \"text/javascript\" })));\n}\n\nexport default function ActionsMenu() {\n    const menu = useMenuState();\n    return h(React.Fragment, null, [\n        h(MenuButton, { ...menu, className: css`\n            border-right: 1px solid rgb(0 83 195) !important;\n        ` }, \"\"),\n        h(Menu, { ...menu, \"aria-label\": \"Actions\" }, [\n            h(MenuItem, { ...menu, onClick: () => { menu.hide(); exportImage(); } }, \"Create image\")\n        ])\n    ])\n}",
    "Editor.mjs": "import localforage from \"https://cdn.skypack.dev/localforage\";\nimport { css } from 'https://cdn.skypack.dev/@emotion/css';\nimport TextEditor from \"./TextEditor.mjs\";\nimport Sidebar from \"./Sidebar.mjs\";\nimport Window from \"./Window.mjs\";\n\nconst {\n    Provider,\n    useTabState,\n    Portal,\n    Button\n} = Reakit;\n\nfunction EditorInner() {\n    const tab = useTabState({ orientation: \"vertical\", selectedId: null });\n\n    const currentFile = document.getElementById(tab.selectedId)?.innerText;\n\n    return h(\"div\", {\n        className: css`\nflex: 1;\ndisplay: flex;\n`\n    }, [\n        // Files\n        h(\"div\", {\n            className: css`\n    flex: 1;\n    max-width: 200px;\n    overflow: auto;\n    `\n        }, [\n            h(Sidebar, { tab }, null)\n        ]),\n        // Editor\n        h(\"div\", {\n            className: css`\n    flex: 4;\n    display: flex;\n    flex-direction: column;\n    width: 0px;\n    `\n        }, [\n            currentFile && h(TextEditor, {\n                currentFile \n            }, null)\n        ])\n    ]);\n}\n\nfunction Editor() {\n    const [loading, setLoading] = React.useState(true);\n    React.useEffect(() => {\n        void async function() {\n            if((await localforage.keys()).length === 0) {\n                window.addEventListener(\"bootstrapcomplete\", () => {\n                    setLoading(false);\n                });\n            }\n            else {\n                setLoading(false);\n            }\n        }();\n    }, []);\n\n    return loading ? h(\"p\", null, \"Loading...\") : h(EditorInner, null, null);\n}\n\nconst EditorStateContext = React.createContext(null);\n\n// Also provides Reakit styles to the children in case they want to use Reakit\nexport function EditorProvider({ children }) {\n    const [open, setOpen] = React.useState(false);\n    const ctxFn = React.useCallback(() => setOpen(true), [setOpen]);\n\n    return h(Provider, { unstable_system: ReakitSystemBootstrap }, [\n        h(EditorStateContext.Provider, { value: [open, ctxFn] }, [\n            children\n        ]),\n        open && h(Portal, null, [ h(Window, { onClose: () => setOpen(false) }, [\n            h(Editor, null, null)\n        ]) ])\n    ])\n}\n\nexport const useEditorState = () => React.useContext(EditorStateContext);\n\nexport function EditorButton() {\n    const [isOpen, openEditor] = useEditorState();\n    return isOpen ? null : h(Portal, null, [\n        h(\"div\", { className: css`\n            position: absolute !important;\n            bottom: 1rem;\n            right: 0px;\n            overflow: hidden;\n        ` }, [\n            h(Button, { onClick: openEditor, className: css`\n                border-radius: 0.25rem 0 0 0.25rem !important;\n                position: relative;\n                right: -82px;\n                transition: right 0.1s cubic-bezier(0.79, 0.26, 0, 0.97) 0s, box-shadow 0.15s ease-in-out 0s !important;\n                &:hover {\n                    right: 0;\n                }\n            ` }, \"</>  Edit code\")\n        ])\n    ]);\n}",
    "FunctionalErrorBoundary.mjs": "// https://gist.github.com/andywer/800f3f25ce3698e8f8b5f1e79fed5c9c\nexport default function Catch(component, errorHandler) {\n    return class extends React.Component {\n        constructor() {\n            super(...arguments);\n            this.state = {\n                error: undefined\n            };\n        }\n        static getDerivedStateFromError(error) {\n            return { error };\n        }\n        componentDidCatch(error, info) {\n            if (errorHandler) {\n                errorHandler(error, info);\n            }\n        }\n        render() {\n            return component(this.props, this.state.error);\n        }\n    };\n}\n",
    "Sidebar.mjs": "import localforage from \"https://cdn.skypack.dev/localforage\";\nimport { css } from 'https://cdn.skypack.dev/@emotion/css';\n\nconst {\n    TabList,\n    useDialogState,\n    Dialog,\n    DialogDisclosure,\n    DialogBackdrop,\n    unstable_useFormState: useFormState,\n    unstable_Form: Form,\n    unstable_FormLabel: FormLabel,\n    unstable_FormInput: FormInput,\n    unstable_FormMessage: FormMessage,\n    unstable_FormSubmitButton: FormSubmitButton,\n    Tab,\n    useMenuState,\n    Menu,\n    MenuItem,\n    Portal,\n    useDisclosureState,\n    Disclosure,\n    DisclosureContent\n} = Reakit;\n\nfunction CreateFileDialog(props) {\n    const form = useFormState({\n        values: { name: \"\" },\n        onValidate: (values) => {\n            if(!values.name) {\n                const errors = {\n                    name: \"Please enter a filename\"\n                };\n                throw errors;\n            }\n        },\n        onSubmit: async (values) => {\n            await localforage.setItem(values.name, \"\");\n            props.hide();\n            document.dispatchEvent(new CustomEvent(\"update-files-list\", {\n                detail: values.name\n            }));\n        },\n        resetOnSubmitSucceed: true\n    });\n\n    return h(DialogBackdrop, { ...props }, [\n        h(Dialog, {\n            ...props,\n            \"aria-label\": \"Create file\",\n        }, [\n            h(Form, { ...form }, [\n                h(FormLabel, { ...form, name: \"name\" }, \"Filename\"),\n                h(FormInput, { ...form, name: \"name\", placeholder: \"Component.mjs\" }, null),\n                h(FormMessage, { ...form, name: \"name\" }, null),\n                h(FormSubmitButton, { ...form }, \"Create\")\n            ])\n        ])\n    ]);\n}\n\nfunction FileTab({ file, tab }) {\n    const menu = useMenuState();\n    const [coords, setCoords] = React.useState(undefined);\n\n    return h(React.Fragment, null, [\n        h(Tab, { ...tab, className: css`overflow-wrap: break-word; font-size: 0.8rem !important;`, onContextMenu: e => {\n            e.preventDefault();\n            console.log(e);\n            console.log(menu);\n            setCoords([e.clientX, e.clientY]);\n            menu.show();\n        } }, file),\n        h(Portal, null, [\n            h(Menu, { ...menu, \"aria-label\": \"File actions\", className: css`\n                position: absolute !important;\n                top: ${coords?.[1] ?? 0}px !important;\n                left: ${coords?.[0] ?? 0}px !important;\n                transform: inherit !important;\n            ` }, [\n                h(MenuItem, { ...menu, onClick: async () => {\n                    menu.hide();\n                    const name = prompt(\"Enter new filename\");\n                    if(name && name.length > 0) {\n                        if(globalThis.models[file]) {\n                            globalThis.models[name] = globalThis.models[file];\n                            delete globalThis.models[file];\n                        }\n                        const fileContents = globalThis.models[file] ? globalThis.models[file].getValue() : await localforage.getItem(file);\n                        await localforage.setItem(name, fileContents);\n                        await localforage.removeItem(file);\n\n                        document.dispatchEvent(new CustomEvent(\"update-files-list\", {\n                            detail: name\n                        }));\n                    }\n                } }, \"Rename\"),\n                h(MenuItem, { ...menu, onClick: async () => {\n                    menu.hide();\n                    if(confirm(`Are you sure you would like to delete ${file}?`)) {\n                        await localforage.removeItem(file);\n                        document.dispatchEvent(new CustomEvent(\"update-files-list\"));\n                    }\n                } }, \"Delete\")\n            ])\n        ])\n    ]);\n}\n\n// Array of file names associated with the editor, so they can be hidden in the UI\nconst EDITOR_FILES = [\n    \"ActionsMenu.mjs\",\n    \"Editor.mjs\",\n    \"Sidebar.mjs\",\n    \"TextEditor.mjs\",\n    \"Window.mjs\",\n    \"_originalImage.js\",\n    \"_workerFetch.fragment.js\",\n    \"FunctionalErrorBoundary.mjs\"\n];\n\nfunction makeSplitFiles(files) {\n    return files.reduce(([a, b], cur) => EDITOR_FILES.includes(cur) ? [a, [...b, cur]] : [[...a, cur], b], [[], []]);\n}\n\nexport default function Sidebar({ tab }) {\n    const [splitFiles, setSplitFiles] = React.useState([[], []]);\n\n    async function updateFilesList(fileName) {\n        const f = await localforage.keys();\n        const split = makeSplitFiles(f);\n        setSplitFiles(split);\n        if(fileName) {\n            tab.select(tab.baseId + \"-\" + (split[0].concat(split[1]).indexOf(fileName) + 1));\n        }\n    }\n\n    React.useEffect(() => {\n        void async function () {\n            await updateFilesList(\"index.mjs\");\n        }();\n    }, []);\n\n    React.useEffect(() => {\n        const onEvent = (e) => updateFilesList(e.detail)\n        document.addEventListener(\"update-files-list\", onEvent);\n        return () => document.removeEventListener(\"update-files-list\", onEvent);\n    }, []);\n\n    const dialog = useDialogState();\n    const disclosure = useDisclosureState();\n\n    return (\n        h(React.Fragment, null, [\n            h(TabList, { ...tab, \"aria-label\": \"Files\", className: css`margin-right: 0.5rem !important;` }, [\n                splitFiles[0].map(file =>\n                    h(FileTab, { file, tab }, null)\n                ),\n                h(DisclosureContent, { ...disclosure }, (_) => disclosure.visible && splitFiles[1].map(file =>\n                    h(FileTab, { file, tab }, null)\n                ))\n            ]),\n            h(Disclosure, { ...disclosure, className: css`\n                padding: 0 0.5rem !important;\n                font-size: small !important;\n                background-color: #efefef !important;\n                color: black !important;\n                margin-top: 0.5rem;\n                white-space: inherit !important;\n            ` }, `${disclosure.visible ? \"Hide\" : \"Show\"} editor internals`),\n            h(DialogDisclosure, { ...dialog, className: css`margin-top: 0.5rem;` }, \"Add file\"),\n            h(CreateFileDialog, { ...dialog }, null)\n        ])\n    );\n}",
    "TextEditor.mjs": "import localforage from \"https://cdn.skypack.dev/localforage\";\nimport { css } from \"https://cdn.skypack.dev/@emotion/css\";\nimport ActionsMenu from \"./ActionsMenu.mjs\";\nconst {\n    Group,\n    Button\n} = Reakit;\n\nfunction EditorLoader(props) {\n    const [loading, setLoading] = React.useState(() => !globalThis.monaco);\n    React.useEffect(() => {\n        if (!loading) return;\n\n        document.addEventListener(\"monaco-editor-ready\", () => {\n            setLoading(false);\n        });\n    }, []);\n\n    return loading ? h(\"div\", {}, \"Loading...\") : h(EditorDataProvider, props, null);\n}\n\nexport default EditorLoader;\n\nlet lastCurrentFile = null;\nfunction EditorDataProvider(props) {\n    const { currentFile } = props;\n    const [fileContents, setFileContents] = React.useState(false);\n\n    // Need to do this as soon as possible so the component doesn't render with the new currentFile but old fileContents\n    if(lastCurrentFile !== currentFile) {\n        setFileContents(false);\n        lastCurrentFile = currentFile;\n    }\n\n    React.useEffect(() => {\n        void async function() {\n            setFileContents(await localforage.getItem(currentFile));\n        }();\n    }, [currentFile]);\n\n    return fileContents === false ? h(\"div\", {}, \"Loading...\") : h(Editor, {\n        ...props,\n        fileContents\n    }, null);\n}\n\nglobalThis.models = {};\nglobalThis.monacoEditor = undefined;\n\nfunction Editor(props) {\n    const { currentFile, fileContents, ...divProps } = props;\n    const editorDiv = React.useRef();\n\n    React.useEffect(() => {\n        monacoEditor = monaco.editor.create(editorDiv.current, {\n            value: fileContents,\n            language: \"javascript\"\n        });\n    }, []);\n\n    React.useEffect(() => {\n        // Set editor contents to fileContents\n        if(!models[currentFile]) {\n            models[currentFile] = monaco.editor.createModel(fileContents,\n                currentFile.endsWith(\".js\") || currentFile.endsWith(\".mjs\") ? \"javascript\"\n                : currentFile.endsWith(\".html\") ? \"html\"\n                : currentFile.endsWith(\".css\") ? \"css\"\n                : \"plaintext\",\n                // TODO: source file path integration with Monaco\n                //currentFile\n            );\n        }\n        monacoEditor.setModel(models[currentFile]);\n    }, [currentFile]);\n\n    // Monaco auto-resize\n    // React.useEffect(() => {\n    //     const onResize = () => {\n    //         monacoEditor.layout();\n    //     };\n    //     window.addEventListener(\"resize\", onResize);\n    //     return () => window.removeEventListener(\"resize\", onResize);\n    // }, []);\n\n    return h(React.Fragment, null, [\n        h(Group, null, [\n            h(ActionsMenu, null, null),\n            h(Button, { onClick: async () => await localforage.setItem(currentFile, models[currentFile].getValue()) }, \"Save\"),\n            h(Button, { onClick: () => window.location.reload() }, \"Reload\")\n        ]),\n        h(\"div\", { className: css`flex: 1; position: relative;`, ...divProps }, [\n            h(\"div\", { ref: editorDiv, className: css`position: absolute; width: 100%; height: 100%;` }, null)\n        ])\n    ]);\n}",
    "Window.mjs": "import { Rnd } from \"https://cdn.skypack.dev/react-rnd\";\nimport { css } from 'https://cdn.skypack.dev/@emotion/css';\n\n// Standalone window demo available here: https://codesandbox.io/s/react-draggable-resizable-desktop-window-like-on-windows-macos-tq62g?file=/src/Window.js\n\nfunction WindowButton({ color, onClick }) {\n  return h(\n    \"button\",\n    {\n      className: css`\n        border-width: 0px;\n        width: 15px;\n        height: 15px;\n        border-radius: 50%;\n        background-color: ${color};\n        cursor: pointer;\n      `,\n      onClick\n    },\n    null\n  );\n}\n\nconst TITLE_BAR_HEIGHT = 24;\n\nconst getRndSize = (rndRef) => {\n  // const b = rndRef.current.state.bounds;\n  // return {\n  //   width: document.body.offsetWidth - b.left - b.right,\n  //   height: document.body.offsetHeight - b.top - b.bottom\n  // };\n  return Object.fromEntries(\n    [\"width\", \"height\"]\n      .map(k => [k, Number(document.getElementsByClassName(\"react-draggable\")[0].style[k].slice(0, -2))])\n  );\n};\n\nexport default function Window({ children, onClose }) {\n  const [minimized, setMinimized] = React.useState(false);\n  const [maximized, setMaximized] = React.useState(false);\n  const [transparent, setTransparent] = React.useState(false);\n  const rndRef = React.useRef();\n\n  return h(\n    Rnd,\n    {\n      ref: rndRef,\n      default: {\n        x: 50,\n        y: 50,\n        width: 800,\n        height: 600\n      },\n      minWidth: 500,\n      minHeight: 350,\n      minHeight: minimized ? TITLE_BAR_HEIGHT : 200,\n      maxHeight: minimized ? TITLE_BAR_HEIGHT : undefined,\n      //bounds: \"window\",\n      cancel: \"[data-rnd-cancel]\",\n      className: css`z-index: 1;`,\n      // onResize: () => {\n      //   globalThis.monacoEditor?.layout();\n      // },\n      onResizeStart: () => setTransparent(true),\n      onResizeStop: () => { setTransparent(false); globalThis.monacoEditor?.layout(); },\n      onDragStart: () => {\n        setTransparent(true);\n        // if(maximized) {\n        //   rndRef.current.updateSize(maximized.size);\n        //   setMaximized(false);\n        // }\n      },\n      onDragStop: () => setTransparent(false),\n      disableDragging: Boolean(maximized)\n    },\n    [\n      h(\n        \"div\",\n        {\n          className: css`\n            display: flex;\n            flex-direction: column;\n            height: 100%;\n            opacity: ${transparent ? \"0.7\" : \"inherit\"};\n            transition: opacity 0.1s ease-in-out;\n          `\n        },\n        [\n          // Window controls\n          h(\n            \"div\",\n            {\n              className: css`\n                background-color: lightgray;\n                display: flex;\n                align-items: baseline;\n                padding: 0 0.5rem;\n                gap: 0.5rem;\n                height: ${TITLE_BAR_HEIGHT}px;\n              `\n            },\n            [\n              h(\n                \"span\",\n                {\n                  className: css`\n                    text-align: center;\n                    flex: 1;\n                    font-size: 1rem;\n                    /* thanks codesandbox (I think it's auto added by sass, not sure) */\n                    font-family: -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen,Ubuntu,Cantarell,\"Fira Sans\",\"Droid Sans\",\"Helvetica Neue\",Helvetica,Arial,sans-serif;\n                    line-height: 1.5rem;\n                  `\n                },\n                \"Reflection editor\"\n              ),\n              h(\n                WindowButton,\n                {\n                  color: \"#ffdf00\",\n                  onClick: () => {\n                    if (minimized) {\n                      rndRef.current.updateSize({\n                        width: getRndSize(rndRef).width,\n                        height: minimized\n                      });\n                      setMinimized(false);\n                      // Jank\n                      setTimeout(() => globalThis.monacoEditor?.layout(), 100);\n                    } else {\n                      const currentSize = getRndSize(rndRef);\n                      console.log(currentSize);\n                      rndRef.current.updateSize({\n                        width: currentSize.width,\n                        height: TITLE_BAR_HEIGHT\n                      });\n                      setMinimized(currentSize.height);\n                    }\n                  }\n                },\n                null\n              ),\n              h(\n                WindowButton,\n                {\n                  color: \"#00ac00\",\n                  onClick: () => {\n                    if (maximized) {\n                      rndRef.current.updateSize(maximized.size);\n                      rndRef.current.updatePosition(maximized.position);\n                      document.body.style.overflow = \"inherit\";\n                      setMaximized(false);\n                    } else {\n                      if (minimized) {\n                        setMinimized(false);\n                      }\n                      setMaximized({\n                        size: getRndSize(rndRef),\n                        position: rndRef.current.getDraggablePosition()\n                      });\n                      rndRef.current.updateSize({ width: document.body.offsetWidth - 1, height: document.body.offsetHeight - 1 });\n                      rndRef.current.updatePosition({ x: 0, y: 0 });\n                      document.body.style.overflow = \"hidden\";\n                    }\n                    // Jank\n                    setTimeout(() => globalThis.monacoEditor?.layout(), 100);\n                  }\n                },\n                null\n              ),\n              h(WindowButton, { color: \"red\", onClick: () => {\n                document.body.style.overflow = \"inherit\";\n                onClose();\n              } }, null)\n            ]\n          ),\n          h(\n            \"div\",\n            {\n              \"data-rnd-cancel\": true,\n              className: css`\n                flex: 1;\n                background-color: white;\n                cursor: initial;\n                display: ${minimized ? \"none\" : \"flex\"};\n                border: 1px solid lightgray;\n                border-top: 0px;\n                overflow: hidden;\n                padding: 0.5rem 0 0 0.5rem;\n              `\n            },\n            [children]\n          )\n        ]\n      )\n    ]\n  );\n}\n",
    "_workerFetch.fragment.js": "exports = async function onFetch(e, localforage) {\n    let thisOrigin = new URL(location.href).origin;\n    let urlObj = new URL(e.request.url);\n    if(urlObj.origin !== thisOrigin || e.request.url.includes(\"_localforage\")) return fetch(e.request);\n\n    let url = urlObj.pathname.slice(1);\n    if(url.length === 0) url = \"index.html\";\n\n    const val = await localforage.getItem(url);\n    return new Response(\n        val ?? \"404 not found\", {\n            headers: { \"Content-Type\":\n                (url.endsWith(\".js\") || url.endsWith(\".mjs\")) ? \"text/javascript\"\n                : url.endsWith(\".html\") ? \"text/html\"\n                : \"text/plain\" },\n            status: val ? 200 : 404,\n            statusText: val ? \"OK\" : \"Not found\"\n        }\n    );\n}",
    "index.html": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Reflection editor</title>\n    <style>\n        body {\n            min-height: 100vh;\n            margin: 0;\n            padding: 0;\n        }\n\n        #app {\n            flex: 1;\n            padding: 1rem;\n        }\n\n        body,\n        #app {\n            display: flex;\n            flex-direction: column;\n        }\n    </style>\n</head>\n\n<body>\n    <div id=\"app\"></div>\n\n    <!-- This code is required for reflection editor to function -->\n    <script src=\"https://unpkg.com/react/umd/react.development.js\"></script>\n    <script src=\"https://unpkg.com/react-dom/umd/react-dom.development.js\"></script>\n    <script src=\"https://unpkg.com/reakit\"></script>\n    <script src=\"https://unpkg.com/reakit-system-bootstrap\"></script>\n\n    <script src=\"https://cdn.jsdelivr.net/npm/monaco-editor/min/vs/loader.js\"></script>\n    <script>\n        globalThis.h = React.createElement;\n        require.config({ paths: { vs: \"https://cdn.jsdelivr.net/npm/monaco-editor/min/vs\" } });\n        require([\"vs/editor/editor.main\"], () => {\n            document.dispatchEvent(new CustomEvent(\"monaco-editor-ready\"));\n        });\n    </script>\n\n    <script type=\"module\" src=\"/index.mjs\"></script>\n    <!-- End reflection editor code -->\n    \n</body>\n\n</html>",
    "index.mjs": "// Welcome to reflection editor!\n// Everything here is being served from your browser's\n// IndexedDB using a service worker, including this\n// editor's code, and you can edit all of it from here\n\nimport { css } from 'https://cdn.skypack.dev/@emotion/css';\nimport { EditorProvider, EditorButton } from \"./Editor.mjs\";\nimport Catch from \"./FunctionalErrorBoundary.mjs\";\n\nfunction App() {\n    const [counter, setCounter] = React.useState(0);\n\n    return h(\"div\", { className: css`\n        font-family: sans-serif;\n    ` }, [\n        h(\"h1\", null, \"Hello world!\"),\n        h(\"p\", null, \"Click the button in the bottom right corner to open the editor\"),\n        h(\"p\", null, `Counter value: ${counter}`),\n        h(\"button\", { onClick: () => setCounter(counter + 1)}, \"Increment counter\")\n    ]);\n}\n\n// Catch errors so the editor still works if the app crashes\nconst ErrorBoundary = Catch((props, error) => {\n    if(error) {\n        return h(\"div\", { className: css`\n            font-family: sans-serif;\n        ` }, [\n            h(\"h1\", { className: css`color: red` }, \"An error has occured in your app\"),\n            h(\"pre\", null, error.stack)\n        ]);\n    }\n    return props.children;\n});\n\nReactDOM.render(h(React.Fragment, null, [\n    h(ErrorBoundary, null, [\n        h(App, null, null),\n    ]),\n    // Don't remove this!\n    h(EditorProvider, null, [\n        h(EditorButton, null, null)\n    ])\n]), document.getElementById(\"app\"));"
};