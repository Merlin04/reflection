export default {
    ".babelrc.json": "{\n    \"assumptions\": {},\n    \"babelrc\": false,\n    \"plugins\": [],\n    \"presets\": [\n        [\"react\", { \"runtime\": \"classic\" }],\n        [\"stage-2\", {\n            \"decoratorsBeforeExport\": false,\n            \"decoratorsLegacy\": false,\n            \"pipelineProposal\": \"minimal\"\n        }],\n        \"typescript\"\n    ],\n    \"sourceMap\": false,\n    \"sourceType\": \"module\"\n}",
    "ActionsMenu.jsx": "import localforage from \"https://cdn.skypack.dev/localforage\";\nimport { css } from 'https://cdn.skypack.dev/@emotion/css';\nconst {\n    useMenuState,\n    Menu,\n    MenuItem,\n    MenuButton\n} = Reakit;\n\nasync function makeImage() {\n    // An image is just a snapshot of the IndexedDB filesystem\n    // formatted as an ES module.\n    const files = Object.fromEntries(\n        await Promise.all(\n            (await localforage.keys())\n            // _originalImage.js is dynamically added at the time of bootstrapping\n            .filter(key => key !== \"_originalImage.js\")\n            .map(async file => [file, await localforage.getItem(file)])\n        )\n    );\n    \n    return `export default ${JSON.stringify(files, null, 4)};`;\n}\n\nasync function exportImage() {\n    window.open(URL.createObjectURL(new Blob([await makeImage()], { type: \"text/javascript\" })));\n}\n\nasync function reset() {\n    await localforage.clear();\n    await (await navigator.serviceWorker.getRegistrations())[0].unregister();\n    window.location.reload();\n}\n\nexport default function ActionsMenu() {\n    const menu = useMenuState();\n    return <>\n        <MenuButton {...menu} className={css`\n            border-right: 1px solid rgb(0 83 195) !important;\n        `} />\n        <Menu {...menu} aria-label=\"Actions\">\n            <MenuItem {...menu} onClick={() => {\n                menu.hide();\n                exportImage();\n            }}>Create image</MenuItem>\n            <MenuItem {...menu} onClick={() => {\n                menu.hide();\n                reset();\n            }}>Reset files</MenuItem>\n        </Menu>\n    </>;\n}",
    "Editor.jsx": "import localforage from \"https://cdn.skypack.dev/localforage\";\nimport { css } from 'https://cdn.skypack.dev/@emotion/css';\nimport TextEditor from \"./TextEditor.jsx\";\nimport Sidebar from \"./Sidebar.jsx\";\nimport Window from \"./Window.jsx\";\n\nconst {\n    Provider,\n    useTabState,\n    Portal,\n    Button\n} = Reakit;\n\nfunction EditorInner() {\n    const tab = useTabState({ orientation: \"vertical\", selectedId: null });\n\n    const currentFile = document.getElementById(tab.selectedId)?.innerText;\n\n    return (\n        <div className={css`\n            flex: 1;\n            display: flex;\n        `}>\n            {/* Files */}\n            <div className={css`\n                flex: 1;\n                max-width: 200px;\n                overflow: auto;\n            `}>\n                <Sidebar tab={tab} />\n            </div>\n            {/* Editor */}\n            <div className={css`\n                flex: 4;\n                display: flex;\n                flex-direction: column;\n                width: 0px;\n            `}>\n                {currentFile && <TextEditor currentFile={currentFile} />}\n            </div>\n        </div>\n    );\n}\n\nfunction Editor() {\n    const [loading, setLoading] = React.useState(true);\n    React.useEffect(() => {\n        void async function() {\n            if((await localforage.keys()).length === 0) {\n                window.addEventListener(\"bootstrapcomplete\", () => {\n                    setLoading(false);\n                });\n            }\n            else {\n                setLoading(false);\n            }\n        }();\n    }, []);\n\n    return loading ? <p>Loading...</p> : <EditorInner />;\n}\n\nconst EditorStateContext = React.createContext(null);\n\n// Also provides Reakit styles to the children in case they want to use Reakit\nexport function EditorProvider({ children }) {\n    const [open, setOpen] = React.useState(false);\n    const ctxFn = React.useCallback(() => setOpen(true), [setOpen]);\n\n    return (\n        <Provider unstable_system={ReakitSystemBootstrap}>\n            <EditorStateContext.Provider value={[open, ctxFn]}>\n                {children}\n            </EditorStateContext.Provider>\n            {open && (\n                <Portal>\n                    <Window onClose={() => setOpen(false)}>\n                        <Editor />\n                    </Window>\n                </Portal>\n            )}\n        </Provider>\n    );\n}\n\nexport const useEditorState = () => React.useContext(EditorStateContext);\n\nexport function EditorButton() {\n    const [isOpen, openEditor] = useEditorState();\n    return isOpen ? null : (\n        <Portal>\n            <div className={css`\n                position: absolute !important;\n                bottom: 1rem;\n                right: 0px;\n                overflow: hidden;\n            `}>\n                <Button onClick={openEditor} className={css`\n                    border-radius: 0.25rem 0 0 0.25rem !important;\n                    position: relative;\n                    right: -82px;\n                    transition: right 0.1s cubic-bezier(0.79, 0.26, 0, 0.97) 0s, box-shadow 0.15s ease-in-out 0s !important;\n                    &:hover {\n                        right: 0;\n                    }\n                `}>{\"</>  Edit code\"}</Button>\n            </div>\n        </Portal>\n    );\n}",
    "FunctionalErrorBoundary.mjs": "// https://gist.github.com/andywer/800f3f25ce3698e8f8b5f1e79fed5c9c\nexport default function Catch(component, errorHandler) {\n    return class extends React.Component {\n        constructor() {\n            super(...arguments);\n            this.state = {\n                error: undefined\n            };\n        }\n        static getDerivedStateFromError(error) {\n            return { error };\n        }\n        componentDidCatch(error, info) {\n            if (errorHandler) {\n                errorHandler(error, info);\n            }\n        }\n        render() {\n            return component(this.props, this.state.error);\n        }\n    };\n}\n",
    "Sidebar.jsx": "import localforage from \"https://cdn.skypack.dev/localforage\";\nimport { css } from 'https://cdn.skypack.dev/@emotion/css';\n\nconst {\n    TabList,\n    useDialogState,\n    Dialog,\n    DialogDisclosure,\n    DialogBackdrop,\n    unstable_useFormState: useFormState,\n    unstable_Form: Form,\n    unstable_FormLabel: FormLabel,\n    unstable_FormInput: FormInput,\n    unstable_FormMessage: FormMessage,\n    unstable_FormSubmitButton: FormSubmitButton,\n    Tab,\n    useMenuState,\n    Menu,\n    MenuItem,\n    Portal,\n    useDisclosureState,\n    Disclosure,\n    DisclosureContent\n} = Reakit;\n\nfunction CreateFileDialog(props) {\n    const form = useFormState({\n        values: { name: \"\" },\n        onValidate: (values) => {\n            if(!values.name) {\n                const errors = {\n                    name: \"Please enter a filename\"\n                };\n                throw errors;\n            }\n        },\n        onSubmit: async (values) => {\n            await localforage.setItem(values.name, \"\");\n            props.hide();\n            document.dispatchEvent(new CustomEvent(\"update-files-list\", {\n                detail: values.name\n            }));\n        },\n        resetOnSubmitSucceed: true\n    });\n\n    return (\n        <DialogBackdrop {...props}>\n            <Dialog {...props} aria-label=\"Create file\">\n                <Form {...form}>\n                    <FormLabel {...form} name=\"name\">Filename</FormLabel>\n                    <FormInput {...form} name=\"name\" placeholder=\"Component.jsx\" />\n                    <FormMessage {...form} name=\"name\" />\n                    <FormSubmitButton {...form}>Create</FormSubmitButton>\n                </Form>\n            </Dialog>\n        </DialogBackdrop>\n    );\n}\n\nfunction FileTab({ file, tab }) {\n    const menu = useMenuState();\n    const [coords, setCoords] = React.useState(undefined);\n\n    return (\n        <>\n            <Tab {...tab} className={css`\n                overflow-wrap: break-word;\n                font-size: 0.8rem !important;\n            `} onContextMenu={e => {\n                e.preventDefault();\n                console.log(e);\n                console.log(menu);\n                setCoords([e.clientX, e.clientY]);\n                menu.show();\n            }}>\n                {file}\n            </Tab>\n            <Portal>\n                <Menu {...menu} aria-label=\"File actions\" className={css`\n                    position: absolute !important;\n                    top: ${coords?.[1] ?? 0}px !important;\n                    left: ${coords?.[0] ?? 0}px !important;\n                    transform: inherit !important;\n                `}>\n                    <MenuItem {...menu} onClick={async () => {\n                        menu.hide();\n                        const name = prompt(\"Enter new filename\");\n                        if(name && name.length > 0) {\n                            if(globalThis.models[file]) {\n                                globalThis.models[name] = globalThis.models[file];\n                                delete globalThis.models[file];\n                            }\n                            const fileContents = globalThis.models[file] ? globalThis.models[file].getValue() : await localforage.getItem(file);\n                            await localforage.setItem(name, fileContents);\n                            await localforage.removeItem(file);\n\n                            document.dispatchEvent(new CustomEvent(\"update-files-list\", {\n                                detail: name\n                            }));\n                        }\n                    }}>Rename</MenuItem>\n                    <MenuItem {...menu} onClick={async () => {\n                        menu.hide();\n                        if(confirm(`Are you sure you would like to delete ${file}?`)) {\n                            await localforage.removeItem(file);\n                            document.dispatchEvent(new CustomEvent(\"update-files-list\"));\n                        }\n                    }}>Delete</MenuItem>\n                </Menu>\n            </Portal>\n        </>\n    );\n}\n\n// Array of file names associated with the editor, so they can be hidden in the UI\nconst EDITOR_FILES = [\n    \"ActionsMenu.jsx\",\n    \"Editor.jsx\",\n    \"Sidebar.jsx\",\n    \"TextEditor.jsx\",\n    \"Window.jsx\",\n    \"_originalImage.js\",\n    \"_workerFetch.fragment.js\",\n    \"FunctionalErrorBoundary.mjs\",\n    \".babelrc.json\",\n    \"reactTypeDefs.mjs\"\n];\n\nfunction makeSplitFiles(files) {\n    return files.reduce(([a, b], cur) => EDITOR_FILES.includes(cur) ? [a, [...b, cur]] : [[...a, cur], b], [[], []]);\n}\n\nexport default function Sidebar({ tab }) {\n    const [splitFiles, setSplitFiles] = React.useState([[], []]);\n\n    async function updateFilesList(fileName) {\n        const f = await localforage.keys();\n        const split = makeSplitFiles(f);\n        setSplitFiles(split);\n        if(fileName) {\n            tab.select(tab.baseId + \"-\" + (split[0].concat(split[1]).indexOf(fileName) + 1));\n        }\n    }\n\n    React.useEffect(() => {\n        void async function () {\n            await updateFilesList(\"index.tsx\");\n        }();\n    }, []);\n\n    React.useEffect(() => {\n        const onEvent = (e) => updateFilesList(e.detail)\n        document.addEventListener(\"update-files-list\", onEvent);\n        return () => document.removeEventListener(\"update-files-list\", onEvent);\n    }, []);\n\n    const dialog = useDialogState();\n    const disclosure = useDisclosureState();\n\n    return (\n        <>\n            <TabList {...tab} aria-label=\"Files\" className={css`margin-right: 0.5rem !important;`}>\n                {splitFiles[0].map(file => (\n                    <FileTab file={file} tab={tab} />\n                ))}\n                <DisclosureContent {...disclosure}>\n                    {() => disclosure.visible && splitFiles[1].map(file => (\n                        <FileTab file={file} tab={tab} />\n                    ))}\n                </DisclosureContent>\n            </TabList>\n            <Disclosure {...disclosure} className={css`\n                padding: 0 0.5rem !important;\n                font-size: small !important;\n                background-color: #efefef !important;\n                color: black !important;\n                margin-top: 0.5rem;\n                white-space: inherit !important;\n            `}>\n                {disclosure.visible ? \"Hide\" : \"Show\"} editor internals\n            </Disclosure>\n            <DialogDisclosure {...dialog} className={css`margin-top: 0.5rem;`}>Add file</DialogDisclosure>\n            <CreateFileDialog {...dialog} />\n        </>\n    );\n}",
    "TextEditor.jsx": "import localforage from \"https://cdn.skypack.dev/localforage\";\nimport { css } from \"https://cdn.skypack.dev/@emotion/css\";\nimport ActionsMenu from \"./ActionsMenu.jsx\";\nimport reactTypeDefs from \"./reactTypeDefs.mjs\";\nconst {\n    Group,\n    Button\n} = Reakit;\n\nfunction EditorLoader(props) {\n    const [loading, setLoading] = React.useState(() => !globalThis.monaco);\n    React.useEffect(() => {\n        if (!loading) return;\n\n        document.addEventListener(\"monaco-editor-ready\", () => {\n            setLoading(false);\n        });\n    }, []);\n\n    return loading ? <div>Loading...</div> : <EditorDataProvider {...props} />;\n}\n\nexport default EditorLoader;\n\nlet lastCurrentFile = null;\nfunction EditorDataProvider(props) {\n    const { currentFile } = props;\n    const [fileContents, setFileContents] = React.useState(false);\n\n    // Need to do this as soon as possible so the component doesn't render with the new currentFile but old fileContents\n    if(lastCurrentFile !== currentFile) {\n        setFileContents(false);\n        lastCurrentFile = currentFile;\n    }\n\n    React.useEffect(() => {\n        void async function() {\n            setFileContents(await localforage.getItem(currentFile));\n        }();\n    }, [currentFile]);\n\n    return fileContents === false ? <div>Loading...</div> : <Editor {...props} fileContents={fileContents} />;\n}\n\nglobalThis.models = {};\nglobalThis.monacoEditor = undefined;\n\n// Monaco TSX setup from https://github.com/Microsoft/monaco-editor/issues/264#issuecomment-654578687\nmonaco.languages.typescript.typescriptDefaults.setCompilerOptions({\n    target: monaco.languages.typescript.ScriptTarget.Latest,\n    allowNonTsExtensions: true,\n    moduleResolution: monaco.languages.typescript.ModuleResolutionKind.NodeJs,\n    module: monaco.languages.typescript.ModuleKind.CommonJS,\n    noEmit: true,\n    esModuleInterop: true,\n    jsx: monaco.languages.typescript.JsxEmit.React,\n    reactNamespace: \"React\",\n    allowJs: true,\n    typeRoots: [\"node_modules/@types\"],\n  });\n\nmonaco.languages.typescript.typescriptDefaults.setDiagnosticsOptions({\n    noSemanticValidation: false,\n    noSyntaxValidation: false,\n});\n\nmonaco.languages.typescript.typescriptDefaults.addExtraLib(\n    reactTypeDefs,\n    `file:///node_modules/@react/types/index.d.ts`\n);\n// End Monaco TSX setup\n\nconst languages = {\n    \"js\": \"javascript\",\n    \"mjs\": \"javascript\",\n    \"jsx\": \"javascript\",\n    \"ts\": \"typescript\",\n    \"tsx\": \"typescript\"\n};\n\nfunction Editor(props) {\n    const { currentFile, fileContents, ...divProps } = props;\n    const editorDiv = React.useRef();\n\n    React.useEffect(() => {\n        monacoEditor = monaco.editor.create(editorDiv.current, {\n            value: fileContents,\n            // TODO\n            language: \"javascript\"\n        });\n    }, []);\n\n    React.useEffect(() => {\n        // Set editor contents to fileContents\n        if(!models[currentFile]) {\n            const ext = currentFile.split(\".\").pop();\n            models[currentFile] = monaco.editor.createModel(fileContents,\n                languages[ext] ?? ext,\n                // TODO: source file path integration with Monaco\n                \"file:///\" + currentFile\n            );\n        }\n        monacoEditor.setModel(models[currentFile]);\n    }, [currentFile]);\n\n    return (\n        <>\n            <Group>\n                <ActionsMenu />\n                <Button onClick={async () => await localforage.setItem(currentFile, models[currentFile].getValue())}>Save</Button>\n                <Button onClick={() => window.location.reload()}>Reload</Button>\n            </Group>\n            <div className={css`flex: 1; position: relative;`} {...divProps}>\n                <div ref={editorDiv} className={css`position: absolute; width: 100%; height: 100%;`} />\n            </div>\n        </>\n    );\n}",
    "TicTacToe.tsx": "import { css } from 'https://cdn.skypack.dev/@emotion/css';\nimport { createState } from \"./niue.tsx\";\n{\nenum CellState {\n    X = 0,\n    O = 1\n}\n\ntype BoardCellState = CellState | undefined;\n\nconst strings = {\n    [CellState.X]: \"X\",\n    [CellState.O]: \"O\",\n    [undefined]: \"\"\n};\n\ntype Board = [\n    BoardCellState, BoardCellState, BoardCellState,\n    BoardCellState, BoardCellState, BoardCellState,\n    BoardCellState, BoardCellState, BoardCellState\n];\n\nconst makeInitialState = () => ({\n    board: Array(9).fill(undefined) as Board,\n    turn: CellState.X\n});\n\nconst [useState, setState] = createState(makeInitialState());\n\nconst getWinner = (board: Board) => [CellState.X, CellState.O].map(player => {\n    const checkCells = (cells: [number, number, number]) =>\n        cells.every(cell => board[cell] === player);\n    \n    return (\n        // Check for rows\n        [0, 3, 6].find(row => checkCells([row, row + 1, row + 2])) !== undefined ||\n        // Check for columns\n        [0, 1, 2].find(col => checkCells([col, col + 3, col + 6])) !== undefined ||\n        // Check for diagonals\n        checkCells([0, 4, 8]) || checkCells([2, 4, 6])\n    );\n}).findIndex(p => p === true)\n\nexport default function TicTacToe() {\n    const { board, turn } = useState();\n\n    const winner = getWinner(board);\n\n    return (\n        <div>\n            <h2>Tic tac toe</h2>\n            {winner !== -1 ? (\n                <p>Congratulations player {strings[winner]}</p>\n            ) : (\n                <p>Player {strings[turn]}, it's your turn</p>\n            )}\n            <button onClick={() => {\n                setState(makeInitialState());\n            }}>Clear</button>\n            <div className={css`\n                display: grid;\n                grid-template-columns: repeat(3, 1fr);\n                width: min(100%, 300px);\n            `}>\n                {board.map((cell, i) => (\n                    <button\n                        key={i}\n                        disabled={cell !== undefined || winner !== -1}\n                        onClick={() => {\n                            board[i] = turn;\n                            setState({\n                                board: [...board],\n                                // JavaScript moment\n                                turn: +!turn\n                            });\n                        }}\n                        className={css`\n                            max-width: 100px;\n                            height: 100px;\n                        `}\n                    >\n                        {strings[cell]}\n                    </button>\n                ))}\n            </div>\n        </div>\n    )\n}",
    "Window.jsx": "import { Rnd } from \"https://cdn.skypack.dev/react-rnd\";\nimport { css } from 'https://cdn.skypack.dev/@emotion/css';\n\n// Somewhat out of date standalone window demo available here: https://codesandbox.io/s/react-draggable-resizable-desktop-window-like-on-windows-macos-tq62g?file=/src/Window.js\n\nfunction WindowButton({ color, onClick }) {\n  return (\n    <button className={css`\n      border-width: 0px;\n      width: 15px;\n      height: 15px;\n      border-radius: 50%;\n      background-color: ${color};\n      cursor: pointer;\n    `} onClick={onClick} />\n  );\n}\n\nconst TITLE_BAR_HEIGHT = 24;\n\nconst getRndSize = () => {\n  return Object.fromEntries(\n    [\"width\", \"height\"]\n      .map(k => [k, Number(document.getElementsByClassName(\"react-draggable\")[0].style[k].slice(0, -2))])\n  );\n};\n\nexport default function Window({ children, onClose }) {\n  const [minimized, setMinimized] = React.useState(false);\n  const [maximized, setMaximized] = React.useState(false);\n  const [transparent, setTransparent] = React.useState(false);\n  const rndRef = React.useRef();\n\n  return (\n    <Rnd\n      ref={rndRef}\n      default={{\n        x: 50,\n        y: 50,\n        width: 800,\n        height: 600\n      }}\n      minWidth={500}\n      minHeight={minimized ? TITLE_BAR_HEIGHT : 200}\n      maxHeight={minimized ? TITLE_BAR_HEIGHT : undefined}\n      cancel=\"[data-rnd-cancel]\"\n      className={css`z-index: 1;`}\n      onResizeStart={() => setTransparent(true)}\n      onResizeStop={() => { setTransparent(false); globalThis.monacoEditor?.layout(); }}\n      onDragStart={() => setTransparent(true)}\n      onDragStop={() => setTransparent(false)}\n      disableDragging={Boolean(maximized)}\n    >\n      <div className={css`\n        display: flex;\n        flex-direction: column;\n        height: 100%;\n        opacity: ${transparent ? \"0.7\" : \"inherit\"};\n        transition: opacity 0.1s ease-in-out;\n      `}>\n        {/* Window controls */}\n        <div className={css`\n          background-color: lightgray;\n          display: flex;\n          align-items: center;\n          padding: 0 0.5rem;\n          gap: 0.5rem;\n          height: ${TITLE_BAR_HEIGHT}px;\n        `}>\n          <span className={css`\n            text-align: center;\n            flex: 1;\n            font-size: 1rem;\n            /* thanks codesandbox (I think it's auto added by sass, not sure) */\n            font-family: -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen,Ubuntu,Cantarell,\"Fira Sans\",\"Droid Sans\",\"Helvetica Neue\",Helvetica,Arial,sans-serif;\n            line-height: 1.5rem;\n          `}>Reflection editor</span>\n\n          <WindowButton color=\"#ffdf00\" onClick={() => {\n            if (minimized) {\n              rndRef.current.updateSize({\n                width: getRndSize().width,\n                height: minimized\n              });\n              setMinimized(false);\n              // Jank\n              setTimeout(() => globalThis.monacoEditor?.layout(), 100);\n            } else {\n              const currentSize = getRndSize();\n              console.log(currentSize);\n              rndRef.current.updateSize({\n                width: currentSize.width,\n                height: TITLE_BAR_HEIGHT\n              });\n              setMinimized(currentSize.height);\n            }\n          }} />\n          <WindowButton color=\"#00ac00\" onClick={() => {\n            if (maximized) {\n              rndRef.current.updateSize(maximized.size);\n              rndRef.current.updatePosition(maximized.position);\n              document.body.style.overflow = \"inherit\";\n              setMaximized(false);\n            } else {\n              if (minimized) {\n                setMinimized(false);\n              }\n              setMaximized({\n                size: getRndSize(),\n                position: rndRef.current.getDraggablePosition()\n              });\n              rndRef.current.updateSize({ width: document.body.offsetWidth - 1, height: document.body.offsetHeight - 1 });\n              rndRef.current.updatePosition({ x: 0, y: 0 });\n              document.body.style.overflow = \"hidden\";\n            }\n            // Jank\n            setTimeout(() => globalThis.monacoEditor?.layout(), 100);\n          }} />\n          <WindowButton color=\"red\" onClick={() => {\n            document.body.style.overflow = \"inherit\";\n            onClose();\n          }} />\n        </div>\n\n        <div data-rnd-cancel className={css`\n          flex: 1;\n          background-color: white;\n          cursor: initial;\n          display: ${minimized ? \"none\" : \"flex\"};\n          border: 1px solid lightgray;\n          border-top: 0px;\n          overflow: hidden;\n          padding: 0.5rem 0 0 0.5rem;\n        `}>\n          {children}\n        </div>\n      </div>\n    </Rnd>\n  );\n}\n",
    "_workerFetch.fragment.js": "const transformExtensions = [\"ts\", \"tsx\", \"jsx\"];\nconst jsExtensions = [\"js\", \"mjs\", ...transformExtensions];\n\nconst extensionContentTypes = {\n    \"html\": \"text/html\",\n    \"css\": \"text/css\",\n    \"json\": \"application/json\",\n    ...(Object.fromEntries(jsExtensions.map(e => [e, \"text/javascript\"])))\n};\n\nasync function transformFile(fileSrc, filename) {\n    if(self.transformCache) {\n        const v = self.transformCache.get(fileSrc);\n        if(v) return v;\n    }\n    else {\n        self.transformCache = new Map();\n    }\n\n    let code;\n    try {\n        const { code: c } = Babel.transform(fileSrc, {\n            ...(JSON.parse(await localforage.getItem(\".babelrc.json\"))),\n            filename\n        });\n    } catch(err) {\n        code = `// This source file failed to transform; reflection editor is instead returning this fallback to avoid crashing your React app.\nexport default function Component() { throw new Error(\"Babel error: \" + ${JSON.stringify(err.stack)}) }`;\n    }\n\n    self.transformCache.set(fileSrc, code);\n    return code;\n}\n\nconst defaultHeaders = {\n    \"Server\": \"Reflection editor service worker\"\n};\n\nexports = async function onFetch(e, localforage) {\n    let thisOrigin = new URL(location.href).origin;\n    let urlObj = new URL(e.request.url);\n    if(urlObj.origin !== thisOrigin || e.request.url.includes(\"_localforage\")) return fetch(e.request);\n\n    let url = urlObj.pathname.slice(1);\n    if(url.length === 0) url = \"index.html\";\n\n    let val = await localforage.getItem(url);\n    if(!val) return new Response(\n        \"404 not found\", {\n            headers: { ...defaultHeaders, \"Content-Type\": \"text/plain\" },\n            status: 404,\n            statusText: \"Not found\"\n        }\n    );\n\n    const extension = url.split(\".\").pop();\n    if(transformExtensions.includes(extension)) val = await transformFile(val, url);\n\n    const contentType = extensionContentTypes[extension] ?? \"text/plain\";\n\n    return new Response(\n        val, {\n            headers: { ...defaultHeaders, \"Content-Type\": contentType },\n            status: 200,\n            statusText: \"OK\"\n        }\n    );\n}",
    "index.html": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Reflection editor</title>\n    <style>\n        body {\n            min-height: 100vh;\n            margin: 0;\n            padding: 0;\n        }\n\n        #app {\n            flex: 1;\n            padding: 1rem;\n        }\n\n        body,\n        #app {\n            display: flex;\n            flex-direction: column;\n        }\n    </style>\n</head>\n\n<body>\n    <div id=\"app\"></div>\n\n    <!-- This code is required for reflection editor to function -->\n    <script src=\"https://unpkg.com/react/umd/react.development.js\"></script>\n    <script src=\"https://unpkg.com/react-dom/umd/react-dom.development.js\"></script>\n    <script src=\"https://unpkg.com/reakit\"></script>\n    <script src=\"https://unpkg.com/reakit-system-bootstrap\"></script>\n\n    <script src=\"https://cdn.jsdelivr.net/npm/monaco-editor/min/vs/loader.js\"></script>\n    <script>\n        require.config({ paths: { vs: \"https://cdn.jsdelivr.net/npm/monaco-editor/min/vs\" } });\n        require([\"vs/editor/editor.main\"], () => {\n            document.dispatchEvent(new CustomEvent(\"monaco-editor-ready\"));\n        });\n    </script>\n\n    <script type=\"module\" src=\"/index.tsx\"></script>\n    <!-- End reflection editor code -->\n    \n</body>\n\n</html>",
    "index.tsx": "// Welcome to reflection editor!\n// Everything here is being served from your browser's\n// IndexedDB using a service worker, including this\n// editor's code, and you can edit all of it from here\n\nimport { css } from 'https://cdn.skypack.dev/@emotion/css';\nimport { EditorProvider, EditorButton } from \"./Editor.jsx\";\nimport Catch from \"./FunctionalErrorBoundary.mjs\";\nimport TicTacToe from \"./TicTacToe.tsx\";\n\nfunction App() {\n    const [counter, setCounter] = React.useState(0);\n\n    return(\n        <div className={css`\n            font-family: sans-serif;\n        `}>\n            <h1>Hello world!</h1>\n            <p>Click the button in the bottom right corner to open the editor</p>\n            <p>Counter value: {counter}</p>\n            <button onClick={() => setCounter(counter + 1)}>Increment counter</button>\n            <TicTacToe />\n        </div>\n    );\n}\n\n// Catch errors so the editor still works if the app crashes\nconst ErrorBoundary = Catch((props: {\n    children: React.ReactNode\n}, error: Error) => {\n    if(error) {\n        return (\n            <div className={css`\n                font-family: sans-serif;\n            `}>\n                <h1 className={css`color: red`}>An error has occured in your app</h1>\n                <pre>{error.stack}</pre>\n            </div>\n        );\n    }\n    return props.children;\n});\n\nReactDOM.render(<>\n    <ErrorBoundary>\n        <App />\n    </ErrorBoundary>\n    {/* Don't remove this! */}\n    <EditorProvider>\n        <EditorButton />\n    </EditorProvider>\n</>, document.getElementById(\"app\"));",
    "niue.tsx": "// Copied here because versions from esm.run/skypack kept trying to import their own versions of React, which makes invalid hook call errors\nconst{useEffect:n,useReducer:e}=React;var t=0;function r(){var e=\"niueevent\"+t;return t++,[function(t,r){n((function(){var n=function(n){t(n.detail)};return document.addEventListener(e,n),function(){document.removeEventListener(e,n)}}),r)},function(n){var t=new CustomEvent(e,{detail:n});document.dispatchEvent(t)}]}var u=function(){return e((function(n){return Object.create(null)}),void 0)[1]},i={},c={},o=0;var a=function(n){var e=o;o++,i[e]=n,c[e]=n;var t=r(),a=t[0],f=t[1];return[function(n){if(null!==n){var t=u();a((function(e){var r=e.changed;n&&!r.some((function(e){return n.includes(e)}))||t()}),[])}return i[e]},function(n){var t=Object.entries(null!=n?n:i[e]).filter((function(n){var t=n[0];return n[1]!==c[e][t]})).map((function(n){return n[0]}));if(t.length>0)if(n)if(Object.keys(n).length<Object.keys(i[e]).length)for(var r in n)i[e][r]=n[r],c[e][r]=n[r];else i[e]=n,c[e]=Object.assign({},n);else c[e]=Object.assign(i[e]);f({changed:t})}]},f=r,v=u;export{f as createEvent,a as createState,v as useRerender};export default null;\n",
    "reactTypeDefs.mjs": "// https://cdn.jsdelivr.net/npm/@types/react@16.9.41/index.d.ts\nconst ReactTypeDefs = atob('');\nexport default ReactTypeDefs;"
};