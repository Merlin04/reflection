export default {
    "ActionsMenu.mjs": "import localforage from \"https://cdn.skypack.dev/localforage\";\nimport { css } from 'https://cdn.skypack.dev/@emotion/css';\nconst {\n    useMenuState,\n    Menu,\n    MenuItem,\n    MenuButton\n} = Reakit;\n\n\nasync function makeImage() {\n    // An image is just a snapshot of the IndexedDB filesystem,\n    // formatted as an ES module.\n    const files = Object.fromEntries(\n        await Promise.all(\n            (await localforage.keys())\n            // _bootstrap.html is dynamically added at the time of bootstrapping\n            .filter(key => key !== \"_bootstrap.html\")\n            .map(async file => [file, await localforage.getItem(file)])\n        )\n    );\n    \n    return `export default ${JSON.stringify(files, null, 4)};`;\n}\n\nasync function exportImage() {\n    window.open(URL.createObjectURL(new Blob([await makeImage()], { type: \"text/javascript\" })));\n}\n\nexport default function ActionsMenu() {\n    const menu = useMenuState();\n    return h(React.Fragment, null, [\n        h(MenuButton, { ...menu, className: css`\n            border-right: 1px solid rgb(0 83 195) !important;\n        ` }, \"\"),\n        h(Menu, { ...menu, \"aria-label\": \"Actions\" }, [\n            h(MenuItem, { ...menu, onClick: () => { menu.hide(); exportImage(); } }, \"Create image\")\n        ])\n    ])\n}",
    "Editor.mjs": "import localforage from \"https://cdn.skypack.dev/localforage\";\nimport ActionsMenu from \"./ActionsMenu.mjs\";\nconst {\n    Group,\n    Button\n} = Reakit;\n\nfunction EditorLoader(props) {\n    const [loading, setLoading] = React.useState(() => !globalThis.monaco);\n    React.useEffect(() => {\n        if (!loading) return;\n\n        document.addEventListener(\"monaco-editor-ready\", () => {\n            setLoading(false);\n        });\n    }, []);\n\n    return loading ? h(\"div\", {}, \"Loading...\") : h(EditorDataProvider, props, null);\n}\n\nexport default EditorLoader;\n\nlet lastCurrentFile = null;\nfunction EditorDataProvider(props) {\n    const { currentFile } = props;\n    const [fileContents, setFileContents] = React.useState(false);\n\n    // Need to do this as soon as possible so the component doesn't render with the new currentFile but old fileContents\n    if(lastCurrentFile !== currentFile) {\n        setFileContents(false);\n        lastCurrentFile = currentFile;\n    }\n\n    React.useEffect(() => {\n        void async function() {\n            setFileContents(await localforage.getItem(currentFile));\n        }();\n    }, [currentFile]);\n\n    return fileContents === false ? h(\"div\", {}, \"Loading...\") : h(Editor, {\n        ...props,\n        fileContents\n    }, null);\n}\n\nglobalThis.models = {};\nlet monacoEditor = undefined;\n\nfunction Editor(props) {\n    const { currentFile, fileContents, ...divProps } = props;\n    const editorDiv = React.useRef();\n\n    React.useEffect(() => {\n        monacoEditor = monaco.editor.create(editorDiv.current, {\n            value: fileContents,\n            language: \"javascript\"\n        });\n    }, []);\n\n    React.useEffect(() => {\n        // Set editor contents to fileContents\n        if(!models[currentFile]) {\n            models[currentFile] = monaco.editor.createModel(fileContents,\n                currentFile.endsWith(\".js\") || currentFile.endsWith(\".mjs\") ? \"javascript\"\n                : currentFile.endsWith(\".html\") ? \"html\"\n                : currentFile.endsWith(\".css\") ? \"css\"\n                : \"plaintext\",\n                // TODO: source file path integration with Monaco\n                //currentFile\n            );\n        }\n        monacoEditor.setModel(models[currentFile]);\n    }, [currentFile]);\n\n    // Monaco auto-resize\n    React.useEffect(() => {\n        const onResize = () => {\n            monacoEditor.layout();\n        };\n        window.addEventListener(\"resize\", onResize);\n        return () => window.removeEventListener(\"resize\", onResize);\n    }, []);\n\n    return h(React.Fragment, null, [\n        h(Group, null, [\n            h(ActionsMenu, null, null),\n            h(Button, { onClick: async () => await localforage.setItem(currentFile, models[currentFile].getValue()) }, \"Save\"),\n            h(Button, { onClick: () => window.location.reload() }, \"Reload\"),\n        ]),\n        h(\"div\", { ref: editorDiv, ...divProps }, null)\n    ]);\n}",
    "Sidebar.mjs": "import localforage from \"https://cdn.skypack.dev/localforage\";\nimport { css } from 'https://cdn.skypack.dev/@emotion/css';\n\nconst {\n    TabList,\n    useDialogState,\n    Dialog,\n    DialogDisclosure,\n    DialogBackdrop,\n    unstable_useFormState: useFormState,\n    unstable_Form: Form,\n    unstable_FormLabel: FormLabel,\n    unstable_FormInput: FormInput,\n    unstable_FormMessage: FormMessage,\n    unstable_FormSubmitButton: FormSubmitButton,\n    Tab,\n    useMenuState,\n    Menu,\n    MenuItem,\n    Portal\n} = Reakit;\n\nfunction CreateFileDialog(props) {\n    const form = useFormState({\n        values: { name: \"\" },\n        onValidate: (values) => {\n            if(!values.name) {\n                const errors = {\n                    name: \"Please enter a filename\"\n                };\n                throw errors;\n            }\n        },\n        onSubmit: async (values) => {\n            await localforage.setItem(values.name, \"\");\n            props.hide();\n            document.dispatchEvent(new CustomEvent(\"update-files-list\", {\n                detail: values.name\n            }));\n        },\n        resetOnSubmitSucceed: true\n    });\n\n    return h(DialogBackdrop, { ...props }, [\n        h(Dialog, {\n            ...props,\n            \"aria-label\": \"Create file\",\n        }, [\n            h(Form, { ...form }, [\n                h(FormLabel, { ...form, name: \"name\" }, \"Filename\"),\n                h(FormInput, { ...form, name: \"name\", placeholder: \"Component.mjs\" }, null),\n                h(FormMessage, { ...form, name: \"name\" }, null),\n                h(FormSubmitButton, { ...form }, \"Create\")\n            ])\n        ])\n    ]);\n}\n\nfunction FileTab({ file, tab }) {\n    const menu = useMenuState(/*{ modal: true }*/);\n    const [coords, setCoords] = React.useState(undefined);\n\n    return h(React.Fragment, null, [\n        h(Tab, { ...tab, className: css`overflow-wrap: break-word; font-size: 0.8rem !important;`, onContextMenu: e => {\n            e.preventDefault();\n            console.log(e);\n            console.log(menu);\n            setCoords([e.clientX, e.clientY]);\n            menu.show();\n        } }, file),\n        h(Portal, null, [\n            h(Menu, { ...menu, \"aria-label\": \"File actions\", className: css`\n                position: absolute !important;\n                top: ${coords?.[1] ?? 0}px !important;\n                left: ${coords?.[0] ?? 0}px !important;\n                transform: inherit !important;\n            ` }, [\n                h(MenuItem, { ...menu, onClick: async () => {\n                    menu.hide();\n                    const name = prompt(\"Enter new filename\");\n                    if(name && name.length > 0) {\n                        if(globalThis.models[file]) {\n                            globalThis.models[name] = globalThis.models[file];\n                            delete globalThis.models[file];\n                        }\n                        const fileContents = globalThis.models[file] ? globalThis.models[file].getValue() : await localforage.getItem(file);\n                        await localforage.setItem(name, fileContents);\n                        await localforage.removeItem(file);\n\n                        document.dispatchEvent(new CustomEvent(\"update-files-list\", {\n                            detail: name\n                        }));\n                    }\n                } }, \"Rename\"),\n                h(MenuItem, { ...menu, onClick: async () => {\n                    menu.hide();\n                    if(confirm(`Are you sure you would like to delete ${file}?`)) {\n                        await localforage.removeItem(file);\n                        document.dispatchEvent(new CustomEvent(\"update-files-list\"));\n                    }\n                } }, \"Delete\")\n            ])\n        ])\n    ]);\n}\n\nexport default function Sidebar({ tab }) {\n    const [files, setFiles] = React.useState([]);\n\n    async function updateFilesList(fileName) {\n        const f = await localforage.keys();\n        setFiles(f);\n        if(fileName) {\n            tab.select(tab.baseId + \"-\" + (f.indexOf(fileName) + 1));\n        }\n    }\n\n    React.useEffect(() => {\n        void async function () {\n            await updateFilesList(\"index.html\");\n        }();\n    }, []);\n\n    React.useEffect(() => {\n        const onEvent = (e) => updateFilesList(e.detail)\n        document.addEventListener(\"update-files-list\", onEvent);\n        return () => document.removeEventListener(\"update-files-list\", onEvent);\n    }, []);\n\n    const dialog = useDialogState();\n\n    return (\n        h(React.Fragment, null, [\n            h(TabList, { ...tab, \"aria-label\": \"Files\" }, files.map(file =>\n                h(FileTab, { file, tab }, null)\n            )),\n            h(DialogDisclosure, { ...dialog, className: css`margin-top: 0.5rem;` }, \"Add file\"),\n            h(CreateFileDialog, { ...dialog }, null)\n        ])\n    );\n}",
    "TestComponent.mjs": "const { createElement: h } = React;\n\nexport default function TestComponent() {\n    return (\n        h(\"p\", null, \"Hello world from test component!\")\n    );\n}",
    "_bootstrapEntrypoint.mjs": "export default async function main(image) {\n    const localforage = await import(\"https://cdn.skypack.dev/localforage\");\n\n    // TODO: is this really how I should do this?\n    image[\"_bootstrap.html\"] = await (await fetch(\"/\")).text();\n    image[\"image.mjs\"] = await (await fetch(\"/image.mjs\")).text();\n\n    // Load image into localStorage\n    for(const [key, value] of Object.entries(image)) {\n        await localforage.setItem(key, value);\n    }\n\n    // Register worker\n    await navigator.serviceWorker.register(\"/worker.js\", { scope: \"/\" });\n    window.location.reload();\n}",
    "_loadESString.fragment.js": "exports = async function (codeStr) {\n    return await import(\"data:text/javascript;charset=utf-8,\" + encodeURIComponent(codeStr));\n};",
    "_workerFetch.fragment.js": "exports = async function onFetch(e, localforage) {\n    let thisOrigin = new URL(location.href).origin;\n    let urlObj = new URL(e.request.url);\n    if(urlObj.origin !== thisOrigin || e.request.url.includes(\"_localforage\")) return fetch(e.request);\n\n    let url = urlObj.pathname.slice(1);\n    if(url.length === 0) url = \"index.html\";\n\n    const val = await localforage.getItem(url);\n    return new Response(\n        val ?? \"404 not found\", {\n            headers: { \"Content-Type\":\n                (url.endsWith(\".js\") || url.endsWith(\".mjs\")) ? \"text/javascript\"\n                : url.endsWith(\".html\") ? \"text/html\"\n                : \"text/plain\" },\n            status: val ? 200 : 404,\n            statusText: val ? \"OK\" : \"Not found\"\n        }\n    );\n}",
    "index.html": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Reflection editor</title>\n    <style>\n        body {\n            min-height: 100vh;\n            margin: 0;\n            padding: 0;\n        }\n\n        #app {\n            flex: 1;\n            padding: 1rem;\n        }\n\n        body,\n        #app {\n            display: flex;\n            flex-direction: column;\n        }\n    </style>\n</head>\n\n<body>\n    <div id=\"app\"></div>\n\n    <script src=\"https://unpkg.com/react/umd/react.development.js\"></script>\n    <script src=\"https://unpkg.com/react-dom/umd/react-dom.development.js\"></script>\n    <script src=\"https://unpkg.com/reakit\"></script>\n    <script src=\"https://unpkg.com/reakit-system-bootstrap\"></script>\n\n    <script src=\"https://cdn.jsdelivr.net/npm/monaco-editor/min/vs/loader.js\"></script>\n    <script>\n        globalThis.h = React.createElement;\n        require.config({ paths: { vs: \"https://cdn.jsdelivr.net/npm/monaco-editor/min/vs\" } });\n        require([\"vs/editor/editor.main\"], () => {\n            document.dispatchEvent(new CustomEvent(\"monaco-editor-ready\"));\n        });\n    </script>\n\n    <script type=\"module\" src=\"/index.mjs\"></script>\n</body>\n\n</html>",
    "index.mjs": "import { css } from 'https://cdn.skypack.dev/@emotion/css';\nimport Editor from \"./Editor.mjs\";\nimport Sidebar from \"./Sidebar.mjs\";\n\nconst {\n    Provider,\n    useTabState\n} = Reakit;\n\nfunction App() {\n    const tab = useTabState({ orientation: \"vertical\", selectedId: null });\n\n    const currentFile = document.getElementById(tab.selectedId)?.innerText;\n\n    return h(Provider, { unstable_system: ReakitSystemBootstrap }, [\n        h(\"div\", {\n            className: css`\n    flex: 1;\n    display: flex;\n    `\n        }, [\n            // Files\n            h(\"div\", {\n                className: css`\n        flex: 1;\n        max-width: 200px;\n        `\n            }, [\n                h(Sidebar, { tab }, null)\n            ]),\n            // Editor\n            h(\"div\", {\n                className: css`\n        flex: 4;\n        display: flex;\n        flex-direction: column;\n        `\n            }, [\n                currentFile && h(Editor, {\n                    className: css`\n            flex: 1;\n            `,\n                    currentFile \n                }, null)\n            ])\n        ])\n    ]);\n}\n\nReactDOM.render(h(App, null, null), document.getElementById(\"app\"));"
};